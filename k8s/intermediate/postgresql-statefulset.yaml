# PostgreSQL StatefulSet for persistent database storage
# StatefulSets provide stable network identities and persistent storage for stateful applications
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgresql
  namespace: hackystack
  labels:
    app: postgresql
    component: database
spec:
  # Single replica for learning purposes
  # In production, you might use multiple replicas with primary/replica setup
  replicas: 1
  # Service name must match the headless service
  serviceName: postgresql-headless
  selector:
    matchLabels:
      app: postgresql
      component: database
  template:
    metadata:
      labels:
        app: postgresql
        component: database
    spec:
      # Security context for the pod
      securityContext:
        runAsNonRoot: true
        runAsUser: 999  # postgres user ID
        runAsGroup: 999 # postgres group ID
        fsGroup: 999    # file system group
      containers:
      - name: postgresql
        image: postgres:15-alpine
        imagePullPolicy: IfNotPresent
        
        # Resource limits and requests
        resources:
          requests:
            cpu: 250m
            memory: 256Mi
          limits:
            cpu: 1000m
            memory: 1Gi
        
        # Environment variables from Secret
        env:
        - name: POSTGRES_DB
          valueFrom:
            secretKeyRef:
              name: postgresql-secret
              key: POSTGRES_DB
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: postgresql-secret
              key: POSTGRES_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgresql-secret
              key: POSTGRES_APP_PASSWORD
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        
        # Port configuration
        ports:
        - containerPort: 5432
          name: postgresql
          protocol: TCP
        
        # Liveness probe - checks if PostgreSQL process is running
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - exec pg_isready -U "$POSTGRES_USER" -d "$POSTGRES_DB" -h 127.0.0.1 -p 5432
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 6
          successThreshold: 1
        
        # Readiness probe - checks if PostgreSQL is ready to accept connections
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - -e
            - |
              exec pg_isready -U "$POSTGRES_USER" -d "$POSTGRES_DB" -h 127.0.0.1 -p 5432
              [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 6
          successThreshold: 1
        
        # Startup probe - allows more time for initial startup
        startupProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - exec pg_isready -U "$POSTGRES_USER" -d "$POSTGRES_DB" -h 127.0.0.1 -p 5432
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 15
          successThreshold: 1
        
        # Volume mounts
        volumeMounts:
        - name: postgresql-data
          mountPath: /var/lib/postgresql/data
        - name: postgresql-config
          mountPath: /etc/postgresql/postgresql.conf
          subPath: postgresql.conf
        - name: postgresql-config
          mountPath: /etc/postgresql/pg_hba.conf
          subPath: pg_hba.conf
        - name: postgresql-config
          mountPath: /docker-entrypoint-initdb.d/init-hackystack-db.sql
          subPath: init-hackystack-db.sql
        
        # Security context for the container
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false  # PostgreSQL needs write access
          capabilities:
            drop:
            - ALL
      
      # Volumes
      volumes:
      - name: postgresql-config
        configMap:
          name: postgresql-config
          defaultMode: 0644
  
  # Volume claim templates - this creates PVCs for each replica
  volumeClaimTemplates:
  - metadata:
      name: postgresql-data
      labels:
        app: postgresql
        component: data
    spec:
      accessModes:
      - ReadWriteOnce
      storageClassName: local-storage
      resources:
        requests:
          storage: 10Gi