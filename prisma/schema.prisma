// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  
  // HackyStack relationships
  applicationUsers ApplicationUser[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// HackyStack Models

enum ApplicationRole {
  VIEWER
  EDITOR
  OWNER
}

model Application {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relationships
  users        ApplicationUser[]
  environments Environment[]
  secrets      Secret[]
  variables    Variable[]

  @@map("applications")
}

model ApplicationUser {
  id            String          @id @default(cuid())
  userId        String          @map("user_id")
  applicationId String          @map("application_id")
  role          ApplicationRole
  createdAt     DateTime        @default(now()) @map("created_at")

  // Relationships
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  application Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)

  @@unique([userId, applicationId])
  @@map("application_users")
}

model Environment {
  id            String   @id @default(cuid())
  name          String
  description   String?
  applicationId String   @map("application_id")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relationships
  application Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  secrets     SecretEnvironment[]
  variables   VariableEnvironment[]

  @@unique([name, applicationId])
  @@map("environments")
}

model Secret {
  id            String   @id @default(cuid())
  key           String
  value         String   // Encrypted value - never displayed after creation
  applicationId String   @map("application_id")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relationships
  application  Application         @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  environments SecretEnvironment[]

  @@unique([key, applicationId])
  @@map("secrets")
}

model Variable {
  id            String   @id @default(cuid())
  key           String
  value         String
  applicationId String   @map("application_id")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relationships
  application  Application           @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  environments VariableEnvironment[]

  @@unique([key, applicationId])
  @@map("variables")
}

model SecretEnvironment {
  id            String @id @default(cuid())
  secretId      String @map("secret_id")
  environmentId String @map("environment_id")

  // Relationships
  secret      Secret      @relation(fields: [secretId], references: [id], onDelete: Cascade)
  environment Environment @relation(fields: [environmentId], references: [id], onDelete: Cascade)

  @@unique([secretId, environmentId])
  @@map("secret_environments")
}

model VariableEnvironment {
  id            String @id @default(cuid())
  variableId    String @map("variable_id")
  environmentId String @map("environment_id")

  // Relationships
  variable    Variable    @relation(fields: [variableId], references: [id], onDelete: Cascade)
  environment Environment @relation(fields: [environmentId], references: [id], onDelete: Cascade)

  @@unique([variableId, environmentId])
  @@map("variable_environments")
}
